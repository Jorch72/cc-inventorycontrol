os.loadAPI("ocs/apis/sensor")

local invSensor = nil
local tankSensor = nil
local euSensor = nil
local outputTable = {}
local configurationTable = {}
local pulseTable = {}
local displayTable = {}

local colorTable = {"redstone"}
for k, v in pairs(colors) do
	if type(k) == "string" and type(v) == "number" then
		table.insert(colorTable, k)
	end
end

local sideLookupTable = {}
for k, v in pairs(rs.getSides()) do
	sideLookupTable[v] = k
end

local colorLookupTable = {}
for k, v in pairs(colorTable) do
	colorLookupTable[v] = k
end

function saveConfig()
	--do it
end

for _, side in pairs(rs.getSides()) do
	outputTable[side] = {redstone = 0}
	for k, v in pairs(colors) do
		if type(k) == "string" and type (v) == "number" then
			--catch all the color aliases and create entries for them
			outputTable[side][k] = 0
		end
	end
end

for _, side in pairs(rs.getSides()) do
	if peripheral.getType(side) == "sensor" then
		if sensor.call(side, "getSensorName") == "openccsensors.item.inventorysensor" then
			invSensor = side
		elseif sensor.call(side, "getSensorName") == "openccsensors.item.tanksensor" then
			tankSensor = side
		elseif sensor.call(side, "getSensorName") == "openccsensors.item.industrialcraftsensor" then
			euSensor = side
		end
	end
	if invSensor and tankSensor and euSensor then break end
end

local textColors = {
	redstone = "white",
	white = "black",
	orange = "black",
	magenta = "white",
	lightBlue = "black",
	yellow = "black",
	lime = "black",
	pink = "black",
	gray = "white",
	lightGray = "black",
	cyan = "white",
	purple = "white",
	blue = "white",
	brown = "white",
	green = "white",
	red = "white",
	black = "white"
}

local optionsTable = {
	inputs = {
		[1] = {
			name = "Redstone",
			states = {"High", "Low"},
			colors = colorTable,
			sides = rs.getSides()
		},
	},
	outputs = {
		colors = colorTable,
		states = {"High", "Low", "Pulse"},
		sides = rs.getSides()
	},
}
if invSensor then
	local targets = sensor.call(invSensor, "getTargets")
	local targetTable = {}
	for k, v in pairs(targets) do
		table.insert(targetTable, k)
	end
	table.insert(optionsTable.inputs, {name = "Inventory", sensor = invSensor, targets = targetTable, states = {"Full", "Partial", "Empty"}})
end
if tankSensor then
	local targets = sensor.call(tankSensor, "getTargets")
	local targetTable = {}
	for k, v in pairs(targets) do
		table.insert(targetTable, k)
	end
	table.insert(optionsTable.inputs, {name = "Tank", sensor = tankSensor, targets = targetTable, states = {"Full", "Partial", "Empty"}})
end
if euSensor then
	local targets = sensor.call(euSensor, "getTargets")
	local targetTable = {}
	for k, v in pairs(targets) do
		table.insert(targetTable, k)
	end
	table.insert(optionsTable.inputs, {name = "EU Storage", sensor = tankSensor, targets = targetTable, states = {"Full", "Partial", "Empty"}})
end

--load configuration file (after sides set up so translation for display table can work.)
local handle = io.open(".ocsInvCntrlConfig", "r")
local entryTable
if handle then
	local configSet = 1
	local entry = 1
	for line in handle:lines() do
		if line == "or" or line == "and" then
			if entryTable then
				table.insert(configurationTable, entryTable)
				configSet = configSet + 1
			end
			entryTable = {conditionType = line, conditions = {}, outputs = {}}
		elseif string.match(line, "(%a+):") == "input" then
			local condTable = {}
			local dispEntry = {entryType = "input", configSet = configSet, configEntry = entry}
			condTable.type, condTable.state, condTable.location = string.match(line, "%a+:(%a+),(%a+),(.+)")
			for i=1, #optionsTable.inputs do
				if optionsTable.inputs[i].name == condTable.type then
					dispEntry.inputNumber = i
					if condTable.type ~= "Redstone" then
						for k, v in pairs(optionsTable.inputs[i].targets) do
							if condTable.location == v then
								dispEntry.inputLocation = k
							end
						end
					else
						dispEntry.inputSide, dispEntry.inputColor = string.match(condTable.location, "(%a+)_(%a+)")
						dispEntry.inputSide, dispEntry.inputColor = sideLookupTable[dispEntry.inputSide], colorLookupTable[dispEntry.inputColor]
					end
					for k, v in pairs(optionsTable.inputs[i].states) do
						if condTable.state == v then
							dispEntry.inputState = k
						end
					end
					table.insert(displayTable, dispEntry)
					break
				end
			end
			table.insert(entryTable.conditions, condTable)
			entry = entry + 1
		elseif string.match(line, "(%a+):") == "output" then
			local outTable = {}
			local dispEntry = {entryType = "output", configSet = configSet, configEntry = entry}
			outTable.type, outTable.side, outTable.color, outTable.state, outTable.duration, outTable.count, outTable.delay = string.match(line, "%a+:(%a+),(%a+),(%a+),(%a+),(.-),(%d+),(.-)")
			outTable.duration, outTable.count, outTable.delay = tonumber(outTable.duration), tonumber(outTable.count), tonumber(outTable.delay)
			dispEntry.outputSide, dispEntry.outputColor, dispEntry.pulseDuration, dispEntry.pulseCount, dispEntry.pulseDelay = sideLookupTable[outTable.side], colorLookupTable[outTable.color], outTable.duration, outTable.count, outTable.delay
			table.insert(entryTable.outputs, outTable)
			table.insert(displayTable, dispEntry)
			entry = entry + 1
		end
	end
	handle:close()
end

local testConditions = {
	Tank = {
		Full = function(coord)
			local tankData = sensor.call(tankSensor, "getTargetDetails", coord)
			if tankData.Amount >= tankData.Capacity then
				return true
			else
				return false
			end
		end,
		Partial = function(coord)
			local tankData = sensor.call(tankSensor, "getTargetDetails", coord)
			if tankData.Amount < tankData.Capacity and tankData.Amount > 0 then
				return true
			else
				return false
			end
		end,
		Empty = function(coord)
			local tankData = sensor.call(tankSensor, "getTargetDetails", coord)
			if tankData.Amount <= 0 then
				return true
			else
				return false
			end
		end,
	},
	Inventory = {
		Full = function(coord)
			local inventoryData = sensor.call(invSensor, "getTargetDetails", coord)
			for _, slot in pairs(inventoryData) do
				if slot.Size < slot.MaxStack then
					return false
				end
			end
			return true
		end,
		Partial = function(coord)
			local inventoryData = sensor.call(invSensor, "getTargetDetails", coord)
			local totalSize = 0
			local totalMax = 0
			for _, slot in pairs(inventoryData) do
				if slot.Size < slot.MaxStack and slot.Size > 0 then
					return true
				end
				totalSize = totalSize + slot.Size
				totalMax = totalMax + slot.MaxStack
			end
			--catch the all slot are empty or full, but not all empty or all full case.
			if totalSize < totalMax and totalSize > 0 then
				return true
			else
				return false
			end
		end,
		Empty = function(coord)
			local inventoryData = sensor.call(invSensor, "getTargetDetails", coord)
			for _, slot in pairs(inventoryData) do
				if slot.Size > 0 then
					return false
				end
			end
			return true
		end,
	},
	["EU Storage"] = {
		Full = function(coord)
			local euStorageData = sensor.call(euSensor, "getTargetDetails", coord)
			if euStorageData.Stored >= euStorageData.Capacity then
				return true
			else
				return false
			end
		end,
		Partial = function(coord)
			local euStorageData = sensor.call(euSensor, "getTargetDetails", coord)
			if euStorageData.Stored < euStorageData.Capacity and euStorageData.Stored > euStorageData.Output then
				return true
			else
				return false
			end
		end,
		Empty = function(coord)
			local euStorageData = sensor.call(euSensor, "getTargetDetails", coord)
			if euStorageData.Stored < euStorageData.Output then
				return true
			else
				return false
			end
		end,
	},
	Redstone = {
		High = function(side_color)
			local side, color = string.match(side_color, "(%a+)_(%a+)")
			if color == "redstone" then
				return rs.getInput(side)
			else
				return rs.testBundledInput(side, colors[color])
			end
		end,
		Low = function(side_color)
			local side, color = string.match(side_color, "(%a+)_(%a+)")
			if color == "redstone" then
				return not rs.getInput(side)
			else
				return not rs.testBundledInput(side, colors[color])
			end
		end,
	},
}

local function setOutput(side, color, state)
	if state then
		outputTable[side][color] = outputTable[side][color] + 1
		if color == "redstone" then
			if not rs.getOutput(side) then
				rs.setOutput(side, true)
			end
		else
			if not colors.test(rs.getBundledOutput(side), colors[color]) then
				rs.setBundledOutput(side, colors.combine(rs.getBundledOutput(side), colors[color]))
			end
		end
	else
		outputTable[side][color] = outputTable[side][color] - 1
		if outputTable[side][color] == 0 then
			if color == "redstone" then
				rs.setOutput(side, false)
			else
				if colors.test(rs.getBundledOutput(side), colors[color]) then
					rs.setBundledOutput(side, colors.subtract(rs.getBundledOutput(side), colors[color]))
				end
			end
		end
	end
end

local function setPulsing(info, state)
	if state then
		--add the entry to the pulse table
		pulseEntry = {
			side = info.side
			color = info.color
			duration = info.duration
			count = info.count
			delay = info.delay
			timer = os.startTimer(0)
			pulseState = false
			handle = info
		}
		table.insert(pulseTable, pulseEntry)
	else
		for i = 1, #pulseTable do
			if pulseTable[i].handle == info then
				if pulseState then
					setOutput(info.side, info.color, false)
				end
				table.remove(pulseTable, i)
				break
			end
		end
	end
end

local function draw(offset)
	local maxX, maxY = term.getSize()
	for i = 1, maxY do
		local currentEntry = displayTable[math.floor(i + offset - 1 / 2) + 1]
		if currentEntry.configSet % 2 == 0 then
			term.setBackgroundColor(colors.lightGray)
		else
			term.setBackgroundColor(colors.gray)
		end
		term.setCursorPos(1, i)
		term.clearLine()
		if i + offset - 1 % 2 == 0 then --draw the actual entry.
			term.setCursorPos(2, i)
			if currentEntry.entryType == "input" then
				term.setBackgroundColor(colors.black)
				term.setTextColor(colors.white)
				term.write(" "..optionsTable.inputs[currentEntry.inputNumber].name..string.rep(" ", 10 - string.len(optionsTable.inputs[currentEntry.inputNumber].name))) --pre-subtract the 1 we would have added to the length of the name, so 10.
				term.setCursorPos(14, i)
				term.write(" "..optionsTable.inputs[currentEntry.inputNumber].states[currentEntry.inputState]..string.rep(" ", 8 - string.len(optionsTable.inputs[currentEntry.inputNumber].states[currentEntry.inputState])))
				term.setCursorPos(24, i)
				if optionsTable.inputs[currentEntry.inputNumber].name == "Redstone" then
					term.write(" "..optionsTable.inputs[currentEntry.inputNumber].sides[currentEntry.inputSide]..string.rep(" ", 7 - string.len(optionsTable.inputs[currentEntry.inputNumber].sides[currentEntry.inputSide])))
					term.setCursorPos(33, i)
					term.setBackgroundColor(colors[optionsTable.inputs[currentEntry.inputNumber].colors[currentEntry.inputColor]])
					term.setTextColor(colors[textColors[optionsTable.inputs[currentEntry.inputNumber].colors[currentEntry.inputColor]]])
					term.write(" "..optionsTable.inputs[currentEntry.inputNumber].colors[currentEntry.inputColor]..string.rep(" ", 10 - string.len(optionsTable.inputs[currentEntry.inputNumber].colors[currentEntry.inputColor])))
				else
					term.write(" "..optionsTable.inputs[currentEntry.inputNumber].targets[currentEntry.inputLocation]..string.rep(" ", 7 - string.len(optionsTable.inputs[currentEntry.inputNumber].targets[currentEntry.inputLocation])))
				end
			else
				term.setBackgroundColor(colors.black)
				term.setTextColor(colors.white)
				term.write(" "..optionsTable.outputs.sides[currentEntry.outputSide]..string.rep(" ", 7 - string.len(optionsTable.outputs.sides[currentEntry.outputSide])))
				term.setCursorPos(11, i)
				term.setBackgroundColor(colors[optionsTable.outputs.colors[currentEntry.outputColor]])
				term.setTextColor(colors[textColors[optionsTable.outputs.colors[currentEntry.outputColor]]])
				term.write(" "..optionsTable.outputs.colors[currentEntry.outputColor]..string.rep(" ", 10 - string.len(optionsTable.outputs.colors[currentEntry.outputColor])))
				term.setCursorPos(23, i)
				term.setBackgroundColor(colors.black)
				term.setTextColor(colors.white)
				term.write(" "..optionsTable.outputs.states[currentEntry.outputState]..string.rep(" ", 6 - string.len(optionsTable.outputs.states[currentEntry.outputState])))
				if optionsTable.outputs.states[currentEntry.outputState] == "Pulse" then
					term.setCursorPos(31, i)
					term.write(" "..currentEntry.pulseDuration..string.rep(" ", 5 - string.len(tostring(currentEntry.pulseDuration))))
					term.setCursorPos(38, i)
					term.write(" "..currentEntry.pulseCount..string.rep(" ", 5 - string.len(tostring(currentEntry.pulseCount))))
					term.setCursorPos(45, i)
					term.write(" "..currentEntry.pulseDelay..string.rep(" ", 5 - string.len(tostring(currentEntry.pulseDelay))))
				end
			end
		end
	end
end

local offset = 0
local updateTime, updateTimer = 5, os.startTimer(0)

draw(offset)

while true do
	event = {os.pullEvent()}
	if event[1] == "timer" and event[2] == updateTimer then
		for eNum, eInfo in pairs(configurationTable) do
			--iterate the entry's conditions
			local condTrueCount, condFalseCount = 0, 0
			for cNum, cInfo in pairs(eInfo.conditions) do
				if testConditions[cInfo.type][cInfo.state](cInfo.location) then
					condTrueCount = condTrueCount + 1
				else
					condFalseCount = condFalseCount + 1
				end
			end
			local setState = nil
			if ((eInfo.conditionType == "or" and condTrueCount > 0) or (eInfo.conditionType == "and" and condFalseCount == 0) and eInfo.lastState == false then
				--condition is true and needs to be set.
				setState = true
			elseif ((eInfo.conditionType == "or" and condTrueCount == 0) or (eInfo.conditionType == "and" and condFalseCount > 0) and eInfo.lastState == true then
				--condition is false and needs to be set.
				setState = false
			end
			if setState ~= nil then
				for oNum, oInfo in pairs(eInfo.outputs) do
					if oInfo.state ~= "pulse" then
						setOutput(oInfo.side, oInfo.color, ((oInfo.state == "high") == setState))
					else
						setPulsing(oInfo, setState))
					end
				end
				setState = nil
			end
		end
		updateTimer = os.startTimer(updateTime)
	elseif event[1] == "timer" then
		for pNum, pInfo in pairs(pulseTable) do
			if event[2] == pInfo.timer then
				if pInfo.pulseState then
					pInfo.count = pInfo.count - 1
					setOutput(pInfo.side, pInfo.color, false)
					if pInfo.count > 0 then
						pInfo.timer = os.startTimer(pInfo.delay)
					else
						table.remove(pulseTable, pNum)
					end
				else
					setOutput(pInfo.side, pInfo.color, true)
					pInfo.timer = os.startTimer(pInfo.duration)
				end
				break
			end
		end
	end
end
